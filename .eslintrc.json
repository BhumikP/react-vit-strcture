{
  "env": {
    "browser": true,
    "es2021": true
  },
  "extends": [
    // By extending from a plugin config, we can get recommended rules without having to add them manually.

    "plugin:react/recommended",
    "airbnb"
  ],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "settings": {
    "react": {
      // Tells eslint-plugin-react to automatically detect the version of React to use.
      "version": "detect"
    }
  },
  "plugins": ["react"],
  // Tells eslint how to resolve imports

  "import/resolver": {
    "node": {
      "paths": ["src"],
      "extensions": [".js", ".jsx"]
    },
    "alias": {
      "map": [
        ["@assets", "./src/assets"],
        ["@components", "./src/components"],
        ["@common", "./src/components/common"],
        ["@constants", "./src/constants"],
        ["@hooks", "./src/hooks"],
        ["@api-hooks", "./src/api-hooks"],

        ["@services", "./src/services"],
        ["@utils", "./src/utils"],
        ["@views", "./src/views"],
        ["@config", "./src/config"],
        ["@routes", "./src/routes"]
      ],
      "extensions": [".js", ".jsx"]
    }
  },
  "rules": {
    // Add your own rules here to override ones from the extended configs.
    "import/no-named-as-default": 0,
    "no-restricted-imports": [
      "error",
      { "name": "query-string", "message": "Please use qs instead." }
    ],
    "require-await": "error",
    "arrow-body-style": ["error", "as-needed"],
    "prefer-const": "error",
    "no-var": "error",
    "no-shadow": "error",
    "object-shorthand": "error",
    "no-nested-ternary": "error",
    "no-dupe-else-if": "error",
    "array-callback-return": "error",
    "eqeqeq": "error",
    "no-else-return": "error",
    "no-return-await": "error",
    "no-console": "off",
    "react/jsx-uses-react": "off",
    "react/react-in-jsx-scope": "off",
    "react/jsx-key": "error",
    "react/jsx-no-target-blank": "error",
    "react/default-props-match-prop-types": "error",
    "react/forbid-prop-types": "off",
    "react/no-array-index-key": "error",
    "react/no-typos": "error",
    "react/no-unescaped-entities": "error",
    "react/prefer-stateless-function": "error",
    "react/prop-types": "off",
    "react/require-default-props": "error",
    "react/jsx-no-duplicate-props": "error",
    "react/jsx-sort-props": [
      "error",
      {
        "callbacksLast": true,
        "shorthandFirst": true,
        "ignoreCase": true,
        "reservedFirst": true
      }
    ],
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "no-inline-styles/no-inline-styles": "off",
    "import/order": [
      "error",
      {
        "alphabetize": { "order": "asc", "caseInsensitive": true },
        "newlines-between": "always",
        "pathGroups": [
          { "pattern": "react", "group": "external", "position": "before" },
          { "pattern": "*.css", "group": "index", "position": "before" },
          { "pattern": "*.scss", "group": "index", "position": "before" },
          { "pattern": "@config/**", "group": "parent", "position": "before" },
          {
            "pattern": "@assets/**",
            "group": "parent",
            "position": "before"
          },
          { "pattern": "@hooks/**", "group": "parent", "position": "before" },
          {
            "pattern": "@api-hooks/**",
            "group": "parent",
            "position": "before"
          },

          {
            "pattern": "@services/**",
            "group": "parent",
            "position": "before"
          },
          {
            "pattern": "@constants/**",
            "group": "parent",
            "position": "before"
          },
          { "pattern": "@utils/**", "group": "parent", "position": "before" },
          { "pattern": "@common/**", "group": "parent" },
          { "pattern": "@components/**", "group": "parent" },
          { "pattern": "@views/**", "group": "parent" },
          { "pattern": "@routes/**", "group": "parent" }
        ],
        "groups": [
          "builtin",
          "external",
          "index",
          "parent",
          ["internal", "sibling"]
        ]
      }
    ]
  }
}
